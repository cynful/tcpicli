// 2017-12-01 16:50:35.457823 -0800 PST m=+14.770242469
// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots

package vod

import (
	"encoding/json"
	"github.com/tencentcloudplatform/tcpicli/core"
)

type QueryTranscodeTemplateResp struct {
	Code     int64  `json:"code"`
	CodeDesc string `json:"codeDesc"`
	Data     struct {
		Audio struct {
			AudioDownmixMode int64  `json:"audioDownmixMode"`
			AudioResampler   string `json:"audioResampler"`
			Bitrate          int64  `json:"bitrate"`
			Codec            string `json:"codec"`
			SampleRate       int64  `json:"sampleRate"`
			SoundSystem      int64  `json:"soundSystem"`
		} `json:"audio"`
		Comment         string `json:"comment"`
		Container       string `json:"container"`
		CreateTime      int64  `json:"createTime"`
		IsFiltrateAudio int64  `json:"isFiltrateAudio"`
		IsFiltrateVideo int64  `json:"isFiltrateVideo"`
		Name            string `json:"name"`
		UpdateTime      int64  `json:"updateTime"`
		Video           struct {
			Bitrate int64  `json:"bitrate"`
			Codec   string `json:"codec"`
			Denoise struct {
				Enable int64 `json:"enable"`
			} `json:"denoise"`
			Fps                    int64  `json:"fps"`
			Height                 int64  `json:"height"`
			ResolutionSelfAdapting string `json:"resolutionSelfAdapting"`
			Width                  int64  `json:"width"`
		} `json:"video"`
	} `json:"data"`
	Message string `json:"message"`
}

// Implement https://cloud.tencent.com/document/api/266/9912
func QueryTranscodeTemplate(options ...string) (*QueryTranscodeTemplateResp, error) {
	resp, err := DoAction("QueryTranscodeTemplate", options...)
	if err != nil {
		return nil, err
	}
	var s QueryTranscodeTemplateResp
	err = json.Unmarshal(resp, &s)
	return &s, err
}

func (r *QueryTranscodeTemplateResp) String(args ...interface{}) (string, error) {
	var b []byte
	var err error
	if len(args) == 0 {
		b, err = json.MarshalIndent(r, "", "  ")
	} else if len(args) == 1 {
		if val, ok := args[0].(string); ok {
			if len(val) == 0 {
				b, err = json.MarshalIndent(r, "", "  ")
			} else {
				b, err = core.FmtOutput(val, r)
			}
		}
	}
	return string(b), err
}
