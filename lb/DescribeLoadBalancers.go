// 2017-12-09 00:52:26.325512 -0800 PST m=+10.811344220
// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots

package lb

import (
	"encoding/json"
	"github.com/tencentcloudplatform/tcpicli/core"
)

type DescribeLoadBalancersResp struct {
	Code            int64  `json:"code"`
	CodeDesc        string `json:"codeDesc"`
	LoadBalancerSet []struct {
		CreateTime         string `json:"createTime"`
		Domain             string `json:"domain"`
		ExpireTime         string `json:"expireTime"`
		Forward            int64  `json:"forward"`
		InternetAccessible struct {
			InternetChargeType      string `json:"internetChargeType"`
			InternetMaxBandwidthOut string `json:"internetMaxBandwidthOut"`
		} `json:"internetAccessible"`
		IsolatedTime    string `json:"isolatedTime"`
		Isolation       int64  `json:"isolation"`
		LbChargePrepaid struct {
			Period    string `json:"period"`
			RenewFlag string `json:"renewFlag"`
		} `json:"lbChargePrepaid"`
		LbChargeType     string   `json:"lbChargeType"`
		LoadBalancerID   string   `json:"loadBalancerId"`
		LoadBalancerName string   `json:"loadBalancerName"`
		LoadBalancerType int64    `json:"loadBalancerType"`
		LoadBalancerVips []string `json:"loadBalancerVips"`
		Log              string   `json:"log"`
		OpenBgp          int64    `json:"openBgp"`
		ProjectID        int64    `json:"projectId"`
		RsRegionInfo     struct {
			Region string `json:"region"`
			VpcID  string `json:"vpcId"`
		} `json:"rsRegionInfo"`
		Snat             bool   `json:"snat"`
		Status           int64  `json:"status"`
		StatusTime       string `json:"statusTime"`
		SubnetID         int64  `json:"subnetId"`
		UnLoadBalancerID string `json:"unLoadBalancerId"`
		UniqVpcID        string `json:"uniqVpcId"`
		VpcID            int64  `json:"vpcId"`
	} `json:"loadBalancerSet"`
	Message    string `json:"message"`
	TotalCount int64  `json:"totalCount"`
}

// Implement https://cloud.tencent.com/document/api/214/1261
func DescribeLoadBalancers(options ...string) (*DescribeLoadBalancersResp, error) {
	resp, err := DoAction("DescribeLoadBalancers", options...)
	if err != nil {
		return nil, err
	}
	var s DescribeLoadBalancersResp
	err = json.Unmarshal(resp, &s)
	return &s, err
}

func (r *DescribeLoadBalancersResp) String(args ...interface{}) (string, error) {
	var b []byte
	var err error
	if len(args) == 0 {
		b, err = json.MarshalIndent(r, "", "  ")
	} else if len(args) == 1 {
		if val, ok := args[0].(string); ok {
			if len(val) == 0 {
				b, err = json.MarshalIndent(r, "", "  ")
			} else {
				b, err = core.FmtOutput(val, r)
			}
		}
	}
	return string(b), err
}
